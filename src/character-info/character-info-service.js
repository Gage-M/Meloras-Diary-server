const  xss  = require('xss');



/*
                                                          Table "public.character_info"
       Column       |           Type           | Collation | Nullable |             Default              | Storage  | Stats target | Description
--------------------+--------------------------+-----------+----------+----------------------------------+----------+--------------+-------------
 id                 | integer                  |           | not null | generated by default as identity | plain    |              |
 player_id          | integer                  |           | not null |                                  | plain    |              |
 date_created       | timestamp with time zone |           | not null | now()                            | plain    |              |
 character_name     | text                     |           | not null |                                  | extended |              |
 race               | text                     |           | not null |                                  | extended |              |
 background         | text                     |           | not null |                                  | extended |              |
 alignment          | alignment_choice         |           | not null | 'Neutral'::alignment_choice      | plain    |              |
 personality_traits | text                     |           | not null |                                  | extended |              |
 ideals             | text                     |           | not null |                                  | extended |              |
 bonds              | text                     |           | not null |                                  | extended |              |
 flaws              | text                     |           | not null |                                  | extended |              |

oof = {
    select(
        'char.date_created',
        'char.character_name',
        'char.race',
        'char.background',
        'char.alignment',
        'char.personality_traits',
        'char.ideals',
        'char.bonds',
        'char.flaws',
    )
}

*/

const CharacterInfoService = {
  getAllCharacters(db){
    return db
      .from('character_info AS char')
      .select('*',
        db.raw('count(DISTINCT char) AS number_of_character'),
        db.raw(
          `json_strip_nulls(
                json_build_object(
                    'user.user_name',
                )
            )AS creator`
        )
      )
      .leftJoin('diary_users AS user',
        'char.player_id',
        'user.id'
      )
      .groupBy('char.id','user.id');
  },
  getCharacterById(db,id){
    return db
      .from('character_info AS char')
      .select('*',
        db.raw('count(DISTINCT char) AS number_of_character'),
        db.raw(
          `json_strip_nulls(
              json_build_object(
                  'user.user_name',
              )
          )AS creator`
        )
      )
      .leftJoin('diary_users AS user',
        'char.player_id',
        'user.id'
      )
      .where('char.id', id)
      .first();
  },
  insertNewCharacter(db, newContent){
    return db 
      .insert(newContent)
      .into('character_sheet')
      .return('*')
      .then(([char])=> char)
      .then(char => CharacterInfoService.getCharacterById(db,char.id));
  },
  serializeCharacter(char){

  }
  
};
  
module.exports = CharacterInfoService;